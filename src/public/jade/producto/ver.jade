doctype html
html
    head
        include ../includes/head.jade

    body
        include ../includes/navbar.jade

        section#ver_prediccion

            .container
                h2
                    |#{product.name} 
                    a(href="#{baseUrl}/dashboard").
                        (volver a bodega)

                p
                    strong.
                        Vendidos último mes: 
                    |1020

                p
                    strong.
                        Stock en bodega: 
                    |300

                p
                    a.btn.btn-default(href="#").
                        Modificar stock

                h3 Predicción
                    div
                        a.btn.btn-default(href="#{baseUrl}/prediccion/#{product.id}/descargar").
                            Descargar predicción

                    .svg-chart
                        svg#chart(width="800", height="600")

                h3 Planner
                p
                    strong.
                        Debes comprar 200 unidades el próximo pedido.

        include ../includes/scripts.jade

        script.
            
            (function() {
                $.getJSON("#{baseUrl}/prediccion/#{product.id}")
                .done(function(data) {
                    console.log(data) 
                    var chart = d3.select("#chart"),
                        WIDTH = 800,
                        HEIGHT = 600,
                        MARGINS = {
                            top: 50,
                            right: 20,
                            bottom: 50,
                            left: 75
                        },
                        dataMapper = function(data, dataKey) {
                            return Object.keys(data).map(function(key) {
                                if (typeof(dataKey) == "undefined") {
                                    return {"key": parseInt(key), "value": data[key]};
                                } else {
                                    return {"key": parseInt(key), "value": data[key][dataKey]};
                                };
                            });
                        },
                        // Finding maximum and minimum values
                        xValues = dataMapper(data.results.x, "Ventas"),
                        fittedValues = dataMapper(data.results.fitted, "xhat"),
                        meanValues = dataMapper(data.results.mean),
                        upperValues = dataMapper(data.results.upper, "95%"),
                        lowerValues = dataMapper(data.results.lower, "95%"),

                        maxUpperValue = Math.max.apply(null, upperValues.map(function(obj) {
                            return obj.value;
                        }));
                        xScale = d3.scale.linear().range([MARGINS.left, WIDTH - MARGINS.right]).domain([
                            0, xValues.length + meanValues.length - 2]),
                        yScale = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([
                            0, maxUpperValue]); 

                        xAxis = d3.svg.axis()
                            .scale(xScale)
                            .tickPadding(10)
                            .ticks(10),
                        yAxis = d3.svg.axis().scale(yScale).orient("left");

                    chart.append("svg:g")
                        .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
                        .call(xAxis);

                    chart.append("svg:g")
                        .attr("transform", "translate(" + (MARGINS.left) + ", 0)")
                        .call(yAxis);

                    var interpolate = "linear",
                        xLine = d3.svg.line()
                            .x(function(d) {
                                return xScale(d.key);
                            })
                            .y(function(d) {
                                return yScale(d.value);
                            })
                            .interpolate(interpolate);
                    
                    chart.append("svg:path")
                        .attr("d", xLine(xValues))
                        .attr("stroke", "green")
                        .attr("stroke-width", 2)
                        .attr("fill", "none");

                    var fittedLine = d3.svg.line()
                        .x(function(d) {
                            return xScale(xValues.length - fittedValues.length + d.key);
                        })
                        .y(function(d) {
                            return yScale(d.value);
                        })
                        .interpolate(interpolate);

                    chart.append("svg:path")
                        .attr("d", fittedLine(fittedValues))
                        .attr("stroke", "red")
                        .attr("stroke-width", 2)
                        .attr("fill", "none");
                    
                    var meanLine = d3.svg.line()
                        .x(function(d) {
                            return xScale(xValues.length + d.key - 1); 
                        })
                        .y(function(d) {
                            return yScale(d.value);
                        })
                        .interpolate(interpolate);

                    chart.append("svg:path")
                        .attr("d", meanLine(meanValues))
                        .attr("stroke", "blue")
                        .attr("stroke-width", 2)
                        .attr("fill", "none");
                    
                    var upperLine = d3.svg.line()
                        .x(function(d) {
                            return xScale(xValues.length + d.key - 1);
                        })
                        .y(function(d) {
                            return yScale(d.value);
                        })
                        .interpolate(interpolate);

                    chart.append("svg:path")
                        .attr("d", upperLine(upperValues))
                        .attr("stroke", "yellow")
                        .attr("stroke-width", 2)
                        .attr("fill", "none");

                    var lowerLine = d3.svg.line()
                        .x(function(d) {
                            return xScale(xValues.length + d.key - 1);
                        })
                        .y(function(d) {
                            return yScale(d.value);
                        })
                        .interpolate(interpolate);

                    chart.append("svg:path")
                        .attr("d", lowerLine(lowerValues))
                        .attr("stroke", "yellow")
                        .attr("stroke-width", 2)
                        .attr("fill", "none");

                    var forecastArea = d3.svg.area()
                        .x(function(d) {
                            return xScale(xValues.length + d.key - 1);
                        })
                        .y0(function(d) {
                            return yScale(d.lower);
                        })
                        .y1(function(d) {
                            return yScale(d.upper);
                        })

                    forecastData = [];

                    upperValues.forEach(function(obj) {
                        forecastData.push({"upper": obj.value, "key": obj.key});
                    });

                    lowerValues.forEach(function(obj) {
                        forecastData[obj.key]["lower"] = obj.value
                    });

                    chart.append("path")
                        .datum(forecastData)
                        .attr("class", "area")
                        .attr("d", forecastArea);

                    chart.append("text")
                        .attr("x", (WIDTH - MARGINS.left - MARGINS.right )/ 2)
                        .attr("y", MARGINS.top / 2)
                        .style("fill", "black")
                        .text("Holt Winters filtering");

                    // Dashed lines
                    chart.append("line")
                        .attr({
                            "x1": xScale(70),
                            "x2": xScale(70),
                            "y1": yScale(0),
                            "y2": yScale(maxUpperValue),
                            "id": "hoverLine"
                        })
                        .style("stroke-dasharray", ("3", "3"))
                        .attr("stroke", "black")
                        .attr("stroke-width", "2")

                    var tooltip = d3.select(".svg-chart")
                        .append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0)

                    d3.select(".area")
                        .on("mouseover", function(d) {
                            
                        })
                });
            })();
